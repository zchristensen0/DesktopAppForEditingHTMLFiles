/*
 * WebsiteDesignView.java
 */

package websitedesign;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Paths;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.nio.file.StandardOpenOption;
import java.util.Enumeration; //to iterate through buttongroup
import java.util.Scanner;
import java.util.stream.IntStream;
import javax.swing.AbstractButton; //to iterate through buttongroup
import javax.swing.ButtonGroup;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

/**
 * The application's main frame.
 */
public class WebsiteDesignView extends FrameView {

    public WebsiteDesignView(SingleFrameApplication app) {
        super(app);

        initComponents();
        
        DisableControls();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = WebsiteDesignApp.getApplication().getMainFrame();
            aboutBox = new WebsiteDesignAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        WebsiteDesignApp.getApplication().show(aboutBox);
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        txtHeader = new javax.swing.JTextField();
        btnAddEntry = new javax.swing.JButton();
        btnClearAll = new javax.swing.JButton();
        lblNewEntryName = new javax.swing.JLabel();
        txtNewEntryName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        rbEventPage = new javax.swing.JRadioButton();
        rbCareerPage = new javax.swing.JRadioButton();
        cbExistingEntryNames = new javax.swing.JComboBox<>();
        lblExistingEntry = new javax.swing.JLabel();
        rbNewEntry = new javax.swing.JRadioButton();
        rbUpdateEntry = new javax.swing.JRadioButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        bgWhichFile = new javax.swing.ButtonGroup();
        bgNewOrUpdate = new javax.swing.ButtonGroup();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(websitedesign.WebsiteDesignApp.class).getContext().getResourceMap(WebsiteDesignView.class);
        lblHeader.setText(resourceMap.getString("lblHeader.text")); // NOI18N
        lblHeader.setName("lblHeader"); // NOI18N

        txtHeader.setText(resourceMap.getString("txtHeader.text")); // NOI18N
        txtHeader.setName("txtHeader"); // NOI18N

        btnAddEntry.setText(resourceMap.getString("btnAddEntry.text")); // NOI18N
        btnAddEntry.setName("btnAddEntry"); // NOI18N
        btnAddEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEntryActionPerformed(evt);
            }
        });

        btnClearAll.setText(resourceMap.getString("btnClearAll.text")); // NOI18N
        btnClearAll.setName("btnClearAll"); // NOI18N
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        lblNewEntryName.setText(resourceMap.getString("lblNewEntryName.text")); // NOI18N
        lblNewEntryName.setName("lblNewEntryName"); // NOI18N

        txtNewEntryName.setText(resourceMap.getString("txtNewEntryName.text")); // NOI18N
        txtNewEntryName.setName("txtNewEntryName"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        btnDelete.setText(resourceMap.getString("btnDelete.text")); // NOI18N
        btnDelete.setName("btnDelete"); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        bgWhichFile.add(rbEventPage);
        rbEventPage.setText(resourceMap.getString("rbEventPage.text")); // NOI18N
        rbEventPage.setName("rbEventPage"); // NOI18N
        rbEventPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEventPageActionPerformed(evt);
            }
        });

        bgWhichFile.add(rbCareerPage);
        rbCareerPage.setText(resourceMap.getString("rbCareerPage.text")); // NOI18N
        rbCareerPage.setName("rbCareerPage"); // NOI18N
        rbCareerPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCareerPageActionPerformed(evt);
            }
        });

        cbExistingEntryNames.setName("cbExistingEntryNames"); // NOI18N
        cbExistingEntryNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbExistingEntryNamesActionPerformed(evt);
            }
        });

        lblExistingEntry.setText(resourceMap.getString("lblExistingEntry.text")); // NOI18N
        lblExistingEntry.setName("lblExistingEntry"); // NOI18N

        bgNewOrUpdate.add(rbNewEntry);
        rbNewEntry.setText(resourceMap.getString("rbNewEntry.text")); // NOI18N
        rbNewEntry.setName("rbNewEntry"); // NOI18N
        rbNewEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNewEntryActionPerformed(evt);
            }
        });

        bgNewOrUpdate.add(rbUpdateEntry);
        rbUpdateEntry.setText(resourceMap.getString("rbUpdateEntry.text")); // NOI18N
        rbUpdateEntry.setName("rbUpdateEntry"); // NOI18N
        rbUpdateEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbUpdateEntryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(btnAddEntry)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(34, 34, 34)
                        .addComponent(btnClearAll))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHeader)
                            .addComponent(lblExistingEntry)
                            .addComponent(lblNewEntryName))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbExistingEntryNames, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(mainPanelLayout.createSequentialGroup()
                                    .addComponent(txtNewEntryName, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2))
                                .addComponent(txtHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(rbEventPage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbCareerPage))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(rbNewEntry)
                        .addGap(18, 18, 18)
                        .addComponent(rbUpdateEntry)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbNewEntry)
                    .addComponent(rbUpdateEntry))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbEventPage)
                    .addComponent(rbCareerPage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewEntryName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNewEntryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbExistingEntryNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblExistingEntry))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHeader))
                .addGap(91, 91, 91)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddEntry)
                    .addComponent(btnClearAll)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(websitedesign.WebsiteDesignApp.class).getContext().getActionMap(WebsiteDesignView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    //used in btnClearAllActionPerformed
    private void DisableControls() {
        txtNewEntryName.setEnabled(false);
        cbExistingEntryNames.setEnabled(false);
        txtHeader.setEnabled(false);
        btnDelete.setEnabled(false);
        btnAddEntry.setEnabled(false);
    }
    
    private void btnAddEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEntryActionPerformed
        
        String sourceFileName;//name of file to edit
        String tempFileName = "temp.txt";//name of temp file
        String entryStorageFileName;//name of txt file for storing entry names
        String endSentinel;//where to start adding entry; will put at bottom of new entry
        String entryName;//name of entry; used to mark beginning and ending of section
        try {
            
            entryName = txtNewEntryName.getText().toUpperCase();
            
            //sourceFileName, endSentinel, entryStorageFileName depend on which whichFile button selected
            if (rbEventPage.isSelected()) {
                sourceFileName = "Events.html";
                endSentinel = "<!--end of EVENTS section-->";
                entryStorageFileName = "EventList.txt";
            }
            else if (rbCareerPage.isSelected()) {
                sourceFileName = "Careers.html";
                endSentinel = "<!--end of CAREERS section-->";
                entryStorageFileName = "CareerList.txt";
            }
            else {
                throw new NullPointerException();
            }
                        
            File sourceFile = new File(sourceFileName);//tempFile copied to this
            File tempFile = new File(tempFileName);//copied to sourceFile

            FileReader fileReader = new FileReader(sourceFile);
            BufferedReader bufferedReader = new BufferedReader(fileReader);//to read line by line
            
            FileWriter fileWriter = new FileWriter(tempFile);
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);//to write line by line
            
            /*
            write lines until line equals endSentinel
            then write new section
            then replace endSentinel at the end on its own line
            */
            String line; 
            while((line = bufferedReader.readLine()) != null) {
                line = line.trim();
                if (line.equals(endSentinel)) {
                    bufferedWriter.newLine();
                    bufferedWriter.write("<!--start of " + entryName + " section-->");
                    bufferedWriter.newLine();
                    
                    bufferedWriter.write("<h3>" + txtHeader.getText() + "</h3>");
                    bufferedWriter.newLine();
                    
                    bufferedWriter.write("<!--end of " + entryName + " section-->");
                    bufferedWriter.newLine();
                    
                    bufferedWriter.write(endSentinel);
                    bufferedWriter.newLine();
                }
                else {
                    bufferedWriter.write(line);
                    bufferedWriter.newLine();
                }
            }
            bufferedWriter.close();
            bufferedReader.close();
            
            Files.copy(tempFile.toPath(), sourceFile.toPath(), REPLACE_EXISTING);
            
            //update txt storage file
            sourceFile = new File(entryStorageFileName);
            tempFile = new File(tempFileName);
            
            fileReader = new FileReader(sourceFile);
            bufferedReader = new BufferedReader(fileReader);
            
            fileWriter = new FileWriter(tempFile);
            bufferedWriter = new BufferedWriter(fileWriter);
            
            
            while ((line = bufferedReader.readLine()) != null) {
                bufferedWriter.write(line);
                bufferedWriter.newLine();
            }
            bufferedWriter.write(entryName);
            
            bufferedWriter.close();
            bufferedReader.close();
            
            Files.copy(tempFile.toPath(), sourceFile.toPath(), REPLACE_EXISTING);
        }
        catch (IOException | NullPointerException ex) { //must be Java 7+ to throw multiple exceptions this way
            JOptionPane.showMessageDialog(null, "btnAddEntryActionPerformed Failed\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddEntryActionPerformed

    /*
    calls:
        DisableControls()
    */
    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        //clear entry boxes
        txtNewEntryName.setText("");
        txtHeader.setText("");
        cbExistingEntryNames.removeAllItems();
        txtNewEntryName.requestFocus();
        
        DisableControls();
        
        //clear buttons
        bgNewOrUpdate.clearSelection();
        bgWhichFile.clearSelection();
    }//GEN-LAST:event_btnClearAllActionPerformed

    /*
    calls:
        clearTextBoxes()
        updateExistingEntryCB()
    */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String sourceFileName;
        String tempFileName = "temp.txt";
        String storageFileName;
        String entryName;
        String startSentinel;//line to stop writing
        String endSentinel;//line to start writing
        boolean write = true;//true = write to file, false = do not write to file
        
        try {
            
            entryName = cbExistingEntryNames.getSelectedItem().toString();
            
            if (!entryName.equals(null)) { //don't attempt if entryName isn't selected
                /*
                    sourceFileName, startSentinel, endSentinel, storageFileName 
                    depend on which whichPage button is selected
                */
                if (rbEventPage.isSelected()) {
                    sourceFileName = "Events.html";
                    startSentinel = "<!--start of " + entryName + " section-->";
                    endSentinel = "<!--end of " + entryName + " section-->";
                    storageFileName = "EventList.txt";
                }
                else if (rbCareerPage.isSelected()) {
                    sourceFileName = "Careers.html";
                    startSentinel = "<!--start of " + entryName + " section-->";
                    endSentinel = "<!--end of " + entryName + " section-->";
                    storageFileName = "CareerList.txt";
                }
                else {
                    throw new NullPointerException();
                }
                clearTextBoxes();

                File sourceFile = new File(sourceFileName);
                File tempFile = new File(tempFileName);

                FileReader fileReader = new FileReader(sourceFile);
                BufferedReader bufferedReader = new BufferedReader(fileReader);//to read line by line

                FileWriter fileWriter = new FileWriter(tempFile);
                BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);//to write line by line

                /*
                write until startSentinel
                then keep reading lines until endSentinel
                then resume writing
                */
                String line;
                while((line = bufferedReader.readLine()) != null) {
                    line = line.trim();
                    if (line.equals(startSentinel)) {
                        write = false;
                    }
                    else if (!write) {
                        if (line.equals(endSentinel))
                            write = true;
                    }
                    else {
                        bufferedWriter.write(line);
                        bufferedWriter.newLine();
                    }
                }
                bufferedWriter.close();
                bufferedReader.close();

                Files.copy(tempFile.toPath(), sourceFile.toPath(), REPLACE_EXISTING);

                //update txt storage file
                sourceFile = new File(storageFileName);
                tempFile = new File(tempFileName);

                fileReader = new FileReader(sourceFile);
                bufferedReader = new BufferedReader(fileReader);

                fileWriter = new FileWriter(tempFile);
                bufferedWriter = new BufferedWriter(fileWriter);

                while ((line = bufferedReader.readLine()) != null) {
                    line = line.trim();
                    if (line.equals(entryName)) { } //do nothing 
                    else {
                        bufferedWriter.write(line);
                        bufferedWriter.newLine();
                    }
                }
                bufferedWriter.close();
                bufferedReader.close();

                Files.copy(tempFile.toPath(), sourceFile.toPath(), REPLACE_EXISTING);


                updateExistingEntryCB(); //update combobox
            }
        }
        catch (IOException | NullPointerException ex) { //must be Java 7+ to throw multiple exceptions this way
            JOptionPane.showMessageDialog(null, "btnDeleteActionPerformed Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private File getSectionFromFile(String sectionName, String fileName) {
       
        try {
            File file = new File(fileName);
            File tempFile = new File("temp.txt");
        
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);//to read line by line
            
            FileWriter fileWriter = new FileWriter(tempFile);
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);//to write line by line
            
            String startSentinel = "<!--start of " + sectionName + " section-->"; //where to start writing/start of section
            String endSentinel = "<!--end of " + sectionName + " section-->"; //where to stop writing/end of section
            
            /*
            don't write until startSentinel
            start writing until endSentinel
            then return file
            */
            boolean write = false; //start writing if true
            String line = "";
            while ((line = bufferedReader.readLine().trim()) != null) {
                if (line.equals(startSentinel) && !write) {
                    write = true;
                }
                else if (write) {
                    if (!line.equals(endSentinel)) {
                        bufferedWriter.write(line);
                        bufferedWriter.newLine();
                    }
                    else {
                        bufferedReader.close();
                        bufferedWriter.close();
                        return tempFile;
                    }
                }
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "getSectionFromFile Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }
    
    /*
    calls:
        getSectionFromFile()
        getInnerHTMLFromFile()
    */
    private void populateFromExistingEntry() {
        
        try {
                if (cbExistingEntryNames.getSelectedItem() != null) {
                    String entry = cbExistingEntryNames.getSelectedItem().toString();
                    String fileName = "";

                    //fileName depends on which whichPage is selected
                    if (getBGButtonSelected(bgWhichFile).equals(rbEventPage)) {
                        fileName = "Events.html";
                    }
                    else if (getBGButtonSelected(bgWhichFile).equals(rbCareerPage)) {
                        fileName = "Careers.html";
                    }
                    else {
                        return;
                    }
                    
                    //get text from section
                    //tag must be the exact starting tag
                    File section = getSectionFromFile(entry, fileName);
                    String header = getInnerHTMLFromTag("<h3>", section);

                    //set text boxes here
                    txtHeader.setText(header);
                }
            }
        
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "populateFromExistingEntry Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String getInnerHTMLFromTag(String tag, File file) {
        try {
            
            String innerHTML = "";
            
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);//to populate char array with all chars from file
            
            char[] c = new char[(int)file.length()];//will contain file chars in order
            bufferedReader.read(c);//populates char array from bufferedReader
            
            for (int i = 0; i < c.length; i++) {
                if (c[i] == '<') { //'<' signals start of a tag
                    if ((String.copyValueOf(c, i, tag.length()).equals(tag))) {//read in what would be the rest of the tag
                        i += tag.length(); //move i to point after the tag
                        
                        //write until closing tag
                        while (c[i] != '<' && c[i+1] != '/') {// '</' should signal closing tag since start tag was confirmed
                            innerHTML += c[i];
                            i++;
                        }
                        return innerHTML;
                    }
                    
                }
            }
            
            return null;
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "getInnerHTMLFromTag Failed \n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }
    
    /*
    calls:
        getBGButtonSelected()
    */
    private void updateExistingEntryCB() {
        
        
        try {
            JRadioButton button = getBGButtonSelected(bgWhichFile);
            String fileName = "";
            //fileName depends on which whichFile button selected
            if (button.equals(rbEventPage)) {
                fileName = "EventList.txt";   
            }
            if (button.equals(rbCareerPage)) {
                fileName = "CareerList.txt";
            }
            
            //populate combobox with preexisting entries for the file in question
            if (getBGButtonSelected(bgNewOrUpdate).equals(rbUpdateEntry)) {
                    cbExistingEntryNames.removeAllItems();
                    cbExistingEntryNames.addItem(null);//to avoid running populateFromExistingEntry when adding items
                    File file = new File(fileName);
                    FileReader fileReader = new FileReader(file);
                    BufferedReader bufferedReader = new BufferedReader(fileReader);
                    String line;
                    while ((line = bufferedReader.readLine()) != null) {
                        line = line.trim();
                        if (!line.equals("")) { //in case an empty line is in file
                            cbExistingEntryNames.addItem(line);
                        }
                    }
                    bufferedReader.close();
                }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "updateExistingEntryCB Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void clearTextBoxes() {
        txtHeader.setText("");
        txtNewEntryName.setText("");
    }
    /*
    calls:
        getBGButtonSelected()
        updateExistingCB() if update button selected
        populateFromExistingEntry() if update button is selected
        
        as of now only used for update purposes to fill in 
        combobox and text boxes from previous entry
    */
    private void makeChangesForPageButtonSelected() {
        try {
            JRadioButton button = getBGButtonSelected(bgWhichFile);
            
            cbExistingEntryNames.removeAllItems();
            if (button.equals(rbEventPage)) {
                if (getBGButtonSelected(bgNewOrUpdate).equals(rbUpdateEntry)) {
                    updateExistingEntryCB();
                    cbExistingEntryNames.requestFocus();
                    populateFromExistingEntry();
                }
                else if (getBGButtonSelected(bgNewOrUpdate).equals(rbNewEntry)) {
                    txtNewEntryName.requestFocus();
                }
            }
            else if (button.equals(rbCareerPage)) {
                if (getBGButtonSelected(bgNewOrUpdate).equals(rbUpdateEntry)) {
                    updateExistingEntryCB();
                    cbExistingEntryNames.requestFocus();
                    populateFromExistingEntry();
                }
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "makeChangesForPageButtonSelected Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /*
    calls:
        getBGButtonSelected()
        clearTextBoxes()
    */
    private void makeChangesForNewOrUpdateButtonSelected() {
        
        try {
            JRadioButton button = getBGButtonSelected(bgNewOrUpdate);
            clearTextBoxes();
            
            //adjust controls appropriately
            if (button.equals(rbNewEntry)) {
                cbExistingEntryNames.setEnabled(false);
                txtNewEntryName.setEnabled(true);
                txtHeader.setEnabled(true);
                btnDelete.setEnabled(false);
                btnAddEntry.setEnabled(true);

                txtNewEntryName.requestFocus();
            }
            else if (button.equals(rbUpdateEntry)) {
                cbExistingEntryNames.setEnabled(true);
                txtNewEntryName.setText("");
                txtNewEntryName.setEnabled(false);
                txtHeader.setEnabled(true);
                btnDelete.setEnabled(true);
                btnAddEntry.setEnabled(false);

                cbExistingEntryNames.requestFocus();

            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "makeChangesForNewOrUpdateButtonSelected Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /*
    calls:
        getBGButtonSelected()
    */
    private boolean doBothButtonGroupsHaveSelection() {
        if (getBGButtonSelected(bgWhichFile) != null && getBGButtonSelected(bgNewOrUpdate) != null) {
            return true;
        }
        return false;
    }
    
    private JRadioButton getBGButtonSelected(ButtonGroup bg) {
        for (Enumeration<AbstractButton> buttons = bg.getElements(); buttons.hasMoreElements();) {
            JRadioButton button = (JRadioButton)buttons.nextElement();
            if (button.isSelected()) {
                return button;
            }
        }
        return null;
    }
    
    /*
    calls:
        doBothButtonGroupsHaveSelection()
        makeChangesForNewOrUpdateButtonSelected()
        makeChangesForPageButtonSelected()
    */
    private void rbEventPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEventPageActionPerformed
        // TODO add your handling code here:
        try {
            if (rbEventPage.isSelected() && doBothButtonGroupsHaveSelection()) {
                makeChangesForNewOrUpdateButtonSelected();
                makeChangesForPageButtonSelected();
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "rbEventPage Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rbEventPageActionPerformed

    /*
    calls:
        doBothButtonGroupsHaveSelection()
        makeChangesForNewOrUpdateButtonSelected()
        makeChangesForPageButtonSelected()
    */
    private void rbCareerPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCareerPageActionPerformed
        // TODO add your handling code here:
        try {
            if (rbCareerPage.isSelected() && doBothButtonGroupsHaveSelection()) {
                makeChangesForNewOrUpdateButtonSelected();
                makeChangesForPageButtonSelected();   
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "rbCareerPage Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rbCareerPageActionPerformed

    /*
    calls:
        doBothButtonGroupsHaveSelection()
        makeChangesForNewOrUpdateButtonSelected()
    */
    private void rbNewEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNewEntryActionPerformed
        // TODO add your handling code here:
        try {
            if (rbNewEntry.isSelected() && doBothButtonGroupsHaveSelection()) {
                makeChangesForNewOrUpdateButtonSelected();
                cbExistingEntryNames.removeAllItems();
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "rbNewEntry Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rbNewEntryActionPerformed

    /*
    calls:
        doBothButtonGroupsHaveSelection()
        makeChangesForNewOrUpdateButtonSelected()
        makeChangesForPageButtonSelected()
    */
    private void rbUpdateEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbUpdateEntryActionPerformed
        // TODO add your handling code here:
        try {
            if (rbUpdateEntry.isSelected() && doBothButtonGroupsHaveSelection()) {
                makeChangesForNewOrUpdateButtonSelected();
                makeChangesForPageButtonSelected();
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "rbUpdateEntry Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rbUpdateEntryActionPerformed

    /*
    calls:
        populateFromExistinEntry() to automatically populate text boxes with section information
    */
    private void cbExistingEntryNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbExistingEntryNamesActionPerformed
        // TODO add your handling code here:
        try {
            if (cbExistingEntryNames.getSelectedItem() != null) {
                populateFromExistingEntry();
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "cbExistingEntryActionPerformed Failed\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cbExistingEntryNamesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgNewOrUpdate;
    private javax.swing.ButtonGroup bgWhichFile;
    private javax.swing.JButton btnAddEntry;
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox<String> cbExistingEntryNames;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblExistingEntry;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblNewEntryName;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JRadioButton rbCareerPage;
    private javax.swing.JRadioButton rbEventPage;
    private javax.swing.JRadioButton rbNewEntry;
    private javax.swing.JRadioButton rbUpdateEntry;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField txtHeader;
    private javax.swing.JTextField txtNewEntryName;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
